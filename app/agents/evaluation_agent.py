from agents import Agent
from app.agents.tools.extract_situation import extract_situation
from app.agents.tools.extract_task import extract_task
from app.agents.tools.extract_action import extract_action
from app.agents.tools.extract_result import extract_result

from typing import Dict
from pydantic import BaseModel, ConfigDict


class STAROutput(BaseModel):
    Situation: str
    Task: str
    Action: str
    Result: str

    model_config = ConfigDict(extra="forbid")  # üõ°Ô∏è –∑–∞–ø—Ä–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π


# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ response –∏–∑ value_agent
class ValuesEvaluation(BaseModel):
    –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º: str
    –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ: str
    –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: str
    –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: str
    –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ: str

    model_config = ConfigDict(extra="forbid")


# –ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ –∞–≥–µ–Ω—Ç–µ, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω
class EvaluationResult(BaseModel):
    STAR: STAROutput
    Values: ValuesEvaluation

    model_config = ConfigDict(extra="forbid")


# –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–≥–µ–Ω—Ç STAR
def create_evaluation_agent(system_prompt: str) -> Agent:
    return Agent(
        name="Evaluation Agent",
        handoff_description="–û—Ü–µ–Ω–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞ STAR.",
        instructions=system_prompt,
        tools=[extract_situation, extract_task, extract_action, extract_result],
        output_type=STAROutput
    )


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ STAR
def generate_feedback(star_output: STAROutput, skill: str) -> str:
    feedback = []

    if not star_output.Situation or star_output.Situation.lower() in ["–Ω–µ —É–∫–∞–∑–∞–Ω–æ", "–Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç–æ"]:
        feedback.append("–ù–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞ —Å–∏—Ç—É–∞—Ü–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ —Å–æ–±—ã—Ç–∏–µ.")
    if not star_output.Task or "–Ω–µ" in star_output.Task.lower():
        feedback.append("–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ –∏–ª–∏ —Ü–µ–ª—å.")
    if not star_output.Action:
        feedback.append("–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.")
    if not star_output.Result:
        feedback.append("–ù–µ —É–∫–∞–∑–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç.")

    if not feedback:
        return f"–û—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ '{skill}' —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ STAR."

    return f"–û—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ '{skill}':\n- " + "\n- ".join(feedback)
